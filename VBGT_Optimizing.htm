<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html style="direction: ltr;" lang="en-us">
<head>

  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
  <title>Tanner Helland's VB Graphics Tutorials - Part 3
(BitmapBits and DIB Sections)</title>


<!--DO NOT REMOVE THIS TEXT! Template provided by http://www.2createawebsite.com. For more free templates go to http://www.2createawebsite.com/build/templates.html-->
  <meta content="Tanner Helland (www.tannerhelland.com)" name="author">

  <meta content="Part 3 of the comprehensive VB graphics programming tutorial set" name="description">

</head>


<body style="direction: ltr;" alink="#ff0000" link="#000080" vlink="#000080">

<div style="font-family: Verdana;" align="center">
<table style="background-color: rgb(232, 255, 255); width: 90%;" border="1" cellpadding="15">

  <tbody>

    <tr>

      <td>
      <p align="center"><font color="#000080" size="5"><b>VB Graphics Programming&nbsp;- Part 4</b></font></p>

      <p align="center"><font color="#000080" size="5"><b><small>by <a href="mailto:tannerhelland@hotmail.com">Tanner
"DemonSpectre" Helland</a></small></b></font></p>

      </td>

    </tr>

  </tbody>
</table>

<table border="0" cellpadding="8" cellspacing="0" width="90%">

  <tbody>

    <tr>

      <td bgcolor="#e8ffff" valign="top" width="20%">
      <table style="width: 149px; height: 118px;" border="0">

        <tbody>

          <tr>

            <td>&nbsp;</td>

          </tr>

          <tr>

            <td style="text-align: center;">
            <p align="center"><a href="VBGT_Intro.htm"><font size="2">Intro</font></a></p>

            </td>

          </tr>

          <tr>

            <td align="center"><a rel="me" href="VBGT_PureVB.htm"> <font size="2">1 -
Pure VB</font></a></td>

          </tr>

          <tr>

            <td align="center"><a rel="me" href="VBGT_GSPixel.htm"> <font size="2">2 -
Slow API</font></a></td>

          </tr>

          <tr>

            <td align="center"><a href="VBGT_BitmapBitsAndDIBs.htm"> <font size="2">3
- Fast API</font></a></td>

          </tr>

          <tr>

            <td align="center"><font><a href="VBGT_Optimizing.htm"><font size="2">4&nbsp;-
Adv. Optimizing</font></a></font></td>

          </tr>

          <tr>

          </tr>

          <tr>

          </tr>

        </tbody>
      </table>

      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">

        <tbody>

          <tr>

            <td>&nbsp;<br>

&nbsp;<br>

&nbsp;<br>

&nbsp;<br>

&nbsp;<br>

            </td>

          </tr>

        </tbody>
      </table>

      <table style="background-color: rgb(255, 255, 204); width: 147px; height: 188px;" border="1" bordercolor="#a2b3b3" cellpadding="7" cellspacing="0">

        <tbody>

          <tr>

            <td>
            <p align="center"><b>Want more tutorials?</b></p>

            <p align="center"><b>Let me know!</b></p>

            <p align="left"><font size="1"><a href="mailto:tannerhelland@hotmail.com">Contact the author</a>
and let him know your feelings about this tutorial!</font></p>

            <p align="left"><font size="1">Or,
visit his site at <a href="http://www.tannerhelland.com" rel="me" target="_blank">www.tannerhelland.com</a></font></p>

            </td>

          </tr>

        </tbody>
      </table>

      </td>

      <td valign="top" width="80%">
      <p style="text-align: left;"><font size="2"><span style="font-weight: bold;">Even Faster?</span></font></p>

      <p><font face="Verdana" size="2">This
part of the tutorial is slightly different
from the previous sections. &nbsp;Instead of discussing specific
graphics routines, I'm going to give you my "Top 10 List of Graphics
Code Optimizations." &nbsp;This checklist of optimization
techniques will
give you a good guide for speeding up your graphics application.
&nbsp;We'll
start with the easiest ways to speed up your code and end with the most
dramatic (but effective) ways. &nbsp;If your code is too slow, run
it through
this checklist and by the end&nbsp;your code will be running as
fast
as possible! &nbsp;Man, am I generous or what?&nbsp;
(Please contact </font><a href="mailto:tannerhelland@hotmail.com"><font face="Verdana" size="2">tannerhelland@hotmail.com</font></a><font face="Verdana" size="2"> for information about your
cash or check donation... ;)</font></p>

      <p><font face="Verdana" size="2">So
with the expectation that donations will be rolling in by this time
tomorrow, let's hit the top 10 list!</font></p>

      <p style="text-align: left;"><big><font size="2"><big><span style="font-weight: bold;"></span></big></font></big>
&nbsp;</p>

      <p style="text-align: left;"><big><font size="2"><big><span style="font-weight: bold;">Tanner's
Top 10 List of Graphics Optimizations</span></big></font></big></p>

      <p><font face="Verdana" size="2"><b>10.
Compile to native code, enabling every advanced optimization.</b>
&nbsp;While it sounds stupid, this is the easiest - but oftentimes
least
utilized - way to speed up your graphics code. &nbsp;Enabling one
advanced
optimization in particular: 'Remove Array Bound Checks,' will speed up
DIB sections a huge - <i>huge</i>
- amount. &nbsp;When you check that box,
VB stops checking whether or not the array locations you&nbsp;try
to
access are invalid. &nbsp;This has a good part and a bad part,
of course - the good part is that your code involving arrays could be
as much as 10-15x faster. &nbsp;The bad part is that if you <i>do</i>
try
and access an invalid array location, you won't get an error - instead
you'll get a critical fault and your program will crash. &nbsp;(But
if you write
decent code, this shouldn't ever be a problem!)</font></p>

      <p><font face="Verdana" size="2"><b>9.
Check your ScaleMode: use pixels, never twips.</b>
&nbsp;Why the default ScaleMode setting is twips instead of pixels,
I don't
know. &nbsp;The most logical conclusion I've heard is that VB was
designed for business
applications and not image processing, so twips (a standard for
measuring printed images, not monitor-displayed ones) was made the
default. &nbsp;IMHO, this still doesn't justify the default use of
twips. &nbsp;</font></p>

      <p><font face="Verdana" size="2">If
your code a) doesn't work, or b) does work but is strangely slow, make
sure that you're using pixels. &nbsp;As a general rule of thumb,
set
every object's ScaleMode to pixels even if you don't plan on using it
for graphics. &nbsp;That way you'll never fall victim to stupid
twips-related errors.</font></p>

      <p><font face="Verdana" size="2"><b>8.
Don't make your code refreshing.</b>
&nbsp;AutoRedraw is your friend.&nbsp; If you have AutoRedraw
set to false, your
poor computer is going to try and refresh the image every chance it
gets.&nbsp; This is bad.&nbsp; Refreshing an image takes a
great deal of time, so
try and refresh an image only after you're completely done messing with
it.&nbsp;
(There are several exceptions to this rule, but they apply only for
experienced users who are doing unconventional tricks with picture
boxes; generally speaking, unless using a picture box as the receiver
of a buffer, keep AutoRedraw on.)</font></p>

      <p><font face="Verdana" size="2">Another
thing worth mentioning here is progress bars - if you're using a
progress bar to track your image processing, <i>don't refresh it
for every pixel or even every line!</i>
&nbsp;Refreshing a progress bar is almost as slow as refreshing an
image, so
if you must use a progress bar then refresh it every 15-20 lines
so that it doesn't slow you down too much.</font></p>

      <p><font face="Verdana" size="2"><b>7.
Optimize your variables.</b>
Because graphics programming usually involves lots and lots of
variables, here are a couple of tips to make sure that you're not
wasting time with bad variable usage:</font></p>

      <p style="margin-left: 40px;"><font face="Verdana" size="2"><li><i>Variants suck.</i>&nbsp;
Never -
EVER - use variants in your code.&nbsp; They're slow, they take up
a lot of
memory, and unless you're the laziest bum on the planet you can find a
way to write code that doesn't use variants. &nbsp;(Another thing
worth
mentioning is to never declare your variables like this: "Dim x, y as
Long." In this example, VB will declare 'x' as a <i>variant </i>and
'y' as a Long. The proper programming technique would be: "Dim x as
Long, y as Long".) </li>

      <li><i>Don't use decimal variables</i>.&nbsp;
Generally speaking,
'Singles' and 'Doubles' are slower, 'Longs' and 'Integers' are faster.
&nbsp;In
every Visual Basic case I've researched (there are exceptions in other
languages, particularly ASM, and under different hardware
configurations), floating-point/decimal math is slower
than integer/whole number math.&nbsp; Therefore, avoid decimals if
possible.&nbsp; For example, "Red = Red * 1.5" tends to be slower
than
"Red =
(Red * 15) \ 10". </li>

      <li><i>Longs are fastest.</i> &nbsp;As long
as computers remain 32-bit
systems, both Windows and your processor will be optimized for
'Long'-type variables (which is why every API function uses them).
&nbsp;So,
believe it or not, 'Longs' are slightly faster (in most cases) than
integers or bytes - and significantly faster than 'singles', 'doubles',
or 'variants' (typically ~3-5x faster than singles, and moreso for the
other data types). &nbsp;Use 'Longs' unless you absolutely need to
conserve that extra
memory. &nbsp;(This is <i>especially</i> important for
looping variables; because they get accessed so many times, always use
Longs for your loops. &nbsp;<a target="_blank" href="http://www.persistentrealities.com/vbfibre/index.php?category=3&amp;item=13&amp;t=vbfibre"><font face="Verdana" size="2">VBFibre - the famous VB
optimization site</font></a> shows in this example the significant difference between
using a 'Single' and a 'Long' as 'For...Next' variables.) </li>
      </font><font face="Verdana" size="2"><li><i>Avoid
type conversions.</i> &nbsp;Regardless of what type of
variable you end up using, keep it consistent. &nbsp;When you
intermix
variable types, any programming language slows down - a line like
"Integer = Long" requires VB
to temporarily change 'Long' into an integer, and that takes time.
&nbsp;(Note: this doesn't apply to DIB section arrays - they must <i>always</i>
be of type 'Byte.')</li>

      </font></p>

      <p><font face="Verdana" size="2"><b>6.
In-line optimization: fix your math.</b>
In-line optimization refers to optimizing your code one line at a time.
This usually involves using faster math functions and better
programming techniques. There are about a million different things I
could list under this category, so I'll only mention a few of the most
critical math optimizations you can do for graphics code:</font></p>

      <p style="margin-left: 40px;"><font face="Verdana" size="2"><li><i>Watch for dividing code:</i>Two
points here: 1) always use '\' instead of '/'. The difference is
that backslash is integer divide - it ignores any decimals that arise
from the division, while frontslash uses decimal math.
&nbsp;Backslash
tends towards 3x faster on my AMD processor. &nbsp;2) Don't divide
if
you don't have to.&nbsp; Dividing is the
slowest of the four basic math functions - so try to avoid it. </li>

      <li><i>Avoid calling functions and subs within
'For/Next' or 'Do/While' loops.</i>
&nbsp;Though convenient, functions and subs are slower than
manually
inserting that code into the loop.&nbsp; (This is because the
processor has
to jump around in memory between the different routines, which takes
more time than just running a straight line through your code).
&nbsp;The
difference isn't really noticeable unless you're calling them from
within a loop because then the speed loss is accentuated thousands of
times over. </li>

      <li><i>If you must use functions and subs, use ByRef
instead of ByVal.</i>
&nbsp;ByRef variables simply send a function the address of the
variable.
&nbsp;ByVal variables require VB to make a copy of the variable
before it
sends it - and creating a new variable takes up precious processing
time. </li>

      <li><i><u>Lengthy</u> math equations take
a <u>lengthy</u> time to process.</i>
&nbsp;Short lines of math allow the compiler to better optimize
their order
and purpose. &nbsp;One giant line of code might look cool, but the
processor
can't optimize it nearly as well as a bunch of smaller lines. </li>

      </font></p>

      <p><font face="Verdana" size="2">For a
much more in-depth discussion of VB optimization techniques, visit
VBFibre at </font><a href="http://www.persistentrealities.com/vbfibre/index.php"><font face="Verdana" size="2">http://www.persistentrealities.com/vbfibre/index.php</font></a><font face="Verdana" size="2">.
&nbsp;Every VB programmer should look through this site - it's the
most
accurate and well-explained information ANYWHERE about Visual Basic
optimizations.&nbsp; Phenomenal site, donate if you can.</font></p>

      <p><font face="Verdana" size="2"><b>5.
Use look-up tables.</b>
Few things will speed up your code like a look-up table will.
&nbsp;For those
who don't know, consider the following code example (used to invert a
pixel's color):</font></p>


      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b> </b></font><big><code><font face="Courier New" size="2">
      <p><big>For x = 0 to 100</big></p>

      <big> </big>
      <p><big>&nbsp;For y = 0 to 100</big></p>

      <big> </big>
      <p><big>&nbsp; &nbsp;<span style="color: rgb(0, 153, 0);">'Color =
GetPixel()&hellip; goes here</span></big></p>

      <big> </big>
      <p><big>&nbsp; &nbsp;<span style="color: rgb(0, 153, 0);">'RGB extraction goes here</span></big></p>

      <big> </big>
      <p><big>&nbsp; &nbsp;R = 255 - R</big></p>

      <big> </big>
      <p><big>&nbsp; &nbsp;G = 255 - G</big></p>

      <big> </big>
      <p><big>&nbsp; &nbsp;B = 255 - B</big></p>

      <big> </big>
      <p><big>&nbsp; &nbsp;<span style="color: rgb(0, 153, 0);">'SetPixel()&hellip; goes
here</span></big></p>

      <big> </big>
      <p><big>&nbsp;Next y</big></p>

      <big> </big>
      <p><big>Next x</big></p>

      <big> </big></font></code></big>
      <hr style="width: 100%; height: 2px;">
      <p><font face="Verdana" size="2">For
every pixel, VB has to do three
'Subtract' functions. This is bad coding - for this simple 101x101
picture example that's over <i>30,000</i> 'Subtracts'!
&nbsp;Try the following code instead:</font></p>


      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b> </b></font><font face="Courier New" size="2">
      <p>Dim LookUpTable(0 to 255) as Byte</p>

      <p>For x = 0 to 255</p>

      <p style="color: rgb(0, 153, 0);">&nbsp;
&nbsp;'Fill the look-up table with every possible color value and
it's corresponding inverted value</p>

      <p>&nbsp; &nbsp;LookUpTable(x) = 255 - x</p>

      <p>Next x</p>

      <p>&nbsp;</p>

      <p>For x = 0 to 100</p>

      <p>&nbsp;For y = 0 to 100</p>

      <p style="color: rgb(0, 153, 0);">&nbsp;
&nbsp;'Color = GetPixel&hellip; goes here</p>

      <p style="color: rgb(0, 153, 0);"><font><font face="Courier New" size="2">&nbsp; &nbsp;</font></font>'RGB
extraction goes here</p>

      <p><font><font face="Courier New" size="2">&nbsp;
&nbsp;</font></font>R = LookUpTable(R)</p>

      <p><font><font face="Courier New" size="2">&nbsp;
&nbsp;</font></font>G = LookUpTable(G)</p>

      <p><font><font face="Courier New" size="2">&nbsp;
&nbsp;</font></font>B = LookUpTable(B)</p>

      <p style="color: rgb(0, 153, 0);"><font><font face="Courier New" size="2">&nbsp; &nbsp;</font></font>'SetPixel&hellip;
goes here</p>

      <p>&nbsp;Next y</p>

      <p>Next x</p>

      </font>
      <p><b><font face="Verdana" size="2">________________________________________________________</font></b></p>

      <p><font face="Verdana" size="2">With
this code VB only does 256 'Subtracts' and then uses the table of
values to change R, G, and B. &nbsp;This makes a <i>huge</i>
difference in execution time - use look-up tables every chance you
get!&nbsp;
(There is, however, a disclaimer worth placing here - unless you follow
step 10 (particularly the "Remove Array Bound Checks" option) - look-up
tables can accidentally slow you down on small images. &nbsp;These
steps are
in order for a reason!) &nbsp;An excellent example of look-up
tables can be
found in the&nbsp;</font><a href="../../../../Tanner%27s%20Stuff/TannerNewSitev3/VBDownloads/VBGT_Realtime_example.zip"><font face="Verdana" size="2">Real-time Brightness program</font></a><font face="Verdana" size="2">.</font></p>

      <p><font face="Verdana" size="2"><b>4.
Forget about PSet and Point - use the API.</b>
&nbsp;If you haven't read the previous three sections, now is the
time to do
it. &nbsp;PSet and Point are the absolute worst for per-pixel image
processing!&nbsp; Use GetPixel and SetPixel/V for a huge speed
increase.</font></p>

      <p><font face="Verdana" size="2"><b>3.
Forget about GetPixel and SetPixel/V - use DIB sections.</b>
&nbsp;While GetPixel and SetPixel/V are nice, they're still
slow.&nbsp; DIB
sections (or BitmapBits) will give you significantly better results.</font></p>

      <p><font face="Verdana" size="2"><b>2.
DIB Sections do better in streams.</b>&nbsp;
Remember last page when we talked about how to declare your
'ImageData' array? &nbsp;If you take a quick trip down memory lane,
you will
remember that we discussed a method like "Redim ImageData(0 to 2, 0 to
Width, 0 to Height)". &nbsp;While this creates a very easy-to-use
array, we
can improve its speed by declaring it differently. &nbsp;"Redim
ImageData (0 to
(Width * Height * 3))" gives us an array the <i>exact same size</i>
as the first statement, but we are only using one dimension instead of
three - making our array <span style="font-style: italic;">more
than 3x faster</span> for VB to access (and for large arrays,
the gain can surpass 10x). &nbsp;The only problem with this is that we can no
longer
access direct pixels or colors - but for many graphics functions (like
the 'Invert' example on (5), or brightness, or contrast, etc.) we do
the same thing to every color within a pixel so it doesn't
matter.&nbsp; For
example:</font></p>


      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b> </b></font><font face="Courier New" size="2">
      <p>For x = 0 to (Width * Height * 3)</p>

      <p>&nbsp; &nbsp;ImageData(x) = 255 - ImageData(x)</p>

      <p>Next x</p>

      </font>
      <hr style="width: 100%; height: 2px;">
      <p><font face="Verdana" size="2">would
invert an image just the same as
the example in optimization (5). &nbsp;The reason I call this
method a
"stream" is that we treat the image as a continuous stream of values,
not as separate pixels or colors. For a more in-depth example of this,
see the&nbsp;</font><a href="../../../../Tanner%27s%20Stuff/TannerNewSitev3/VBDownloads/VBGT_Realtime_example.zip"><font face="Verdana" size="2">Real-Time Brightness program</font></a><font face="Verdana" size="2">.</font></p>

      <font face="Verdana" size="2"><b>1. If
you do all this and your program is still too slow, try something
extreme.</b>
I hate to say it, but if you've done everything above and your program
is still too slow, you're probably out of luck with traditional
methods. Here are some things you could look into, though:</font>
      <p style="margin-left: 40px;"><font face="Verdana" size="2"><li><i>Consider switching to SafeArrays.</i>
      </li>

      </font><a rel="friend met colleague" target="_blank" href="http://www.studentsofgamedesign.com/vb_safearrays.php"><font face="Verdana" size="2">Students of Game Design</font></a><font face="Verdana" size="2"> has an excellent tutorial
detailing the structure and use of "SafeArrays", the internal VB format
for arrays. &nbsp;SafeArrays won't give you a speed increase in
editing your array information, but they will get and set pixel
information faster than GetDIBits and Set/StretchDIBits. &nbsp;If
your code requires a large amount of getting and setting pixels,
SafeArrays may give you the performance boost you need without a lot of
extra coding (as they are structured almost identically to the arrays
returned by GetDIBits).</font><font face="Verdana" size="2"><li><i>Look into assembly language
extensions.</i> </li>

      </font><a href="http://www.planetsourcecode.com/"><font face="Verdana" size="2">Planet-Source-Code</font></a><font face="Verdana" size="2">
has several excellent programs by the aforementioned Robert Rayment
demonstrating how to
use ASM (assembly language) within VB to create graphics routines
slightly faster than traditional VB methods. Assembly language is the
fastest programming language available to Windows programmers (next to
machine language, but
you don't want to try writing that :), and with some clever work you
can use it within your VB program. &nbsp;Be forewarned, however,
that this is
most definitely <span style="font-style: italic;">not</span>
an easy thing to do - but it may give you a little extra speed.</font><font face="Verdana" size="2"><span style="font-style: italic;"></span><li><i>Search
the net for 3<sup>rd</sup> party SDKs or ActiveX controls
dealing with graphics (DirectX, OpenGL, ActiveX controls, etc.).</i>
&nbsp;In almost every case, DirectX, OpenGL, or similar SDKs
(software
development kits) won't help your per-pixel graphics code to be any
faster. &nbsp;They may, however, provide you with hardware support
for your
effect.&nbsp; For example, DirectX has built-in gamma correction if
the
computer's hardware supports it. &nbsp;This is a lot faster than
trying to perform gamma correction in code. &nbsp;Also, you could
buy a VB-compatible OCX or DLL written in
another language that does your effect for you. &nbsp;This can be,
however,
an expensive option. </li>

      <li><i>Learn another programming language.</i>
The sad but true
fact is that some other programming languages provide faster graphics
programming techniques via pointers and&nbsp;other
tricks.&nbsp; Even java
contains many powerful image editing routines as part of the language,
so if you're really desperate than you can try learning (or rewriting
your project in) another programming
language. &nbsp;Also, if you rewrite your routine in C/C++ you
could compile
it into a DLL and use that from VB, should you want to. </li>

      <li><i>Go to the library and check out some graphics
programming books.</i>
&nbsp;Some of my favorite programming techniques were learned from
non-VB
graphics programming books.&nbsp; Even if you don't understand the
code associated with a book, you
can still learn a lot about different filters, optimization routines,
etc. &nbsp;If your library doesn't have anything good, search
Amazon.com -
you'll be amazed at how many graphics programming books are out there. </li>

      <li><i>Use your imagination.</i>
&nbsp;Sometimes the best
optimizations are written by programmers who aren't planning on writing
a good optimization. &nbsp;Your ingenuity is your best programming
tool - try
to think of new, clever ways to speed up your code. If you think up
something great, be sure to let me know about it! :)</li>

      </font></p>

      <font face="Verdana" size="2"><br>

      </font>
      <hr style="width: 100%; height: 2px;"><br>

      <p><font face="Verdana" size="2">As a
demonstration of many of these techniques, feel free to check out the
Real-time Brightness example below:</font></p>

      <p style="text-align: center;"><big><font face="Verdana" size="2"><a href="../../../../Tanner%27s%20Stuff/TannerNewSitev3/VBDownloads/New%20tutorials/VBGT_DIB_example.zip" rel="me"><big>DOWNLOAD THE REAL-TIME BRIGHTNESS PROGRAM</big></a></font></big></p>

      <p><font face="Verdana" size="2">And that,
my friends, this is the end of these tutorials. &nbsp;It's taken me many, many hours to
write these
up, so I hope you've gained something from reading them.&nbsp; If
you have
any comments, questions, suggestions, ideas for future tutorials, or
want to send me a generous donation, contact me as always at </font><a href="mailto:tannerhelland@hotmail.com"><font face="Verdana" size="2">tannerhelland@hotmail.com</font></a><font face="Verdana" size="2">. &nbsp;I would also
consider myself thanked if you head to </font><a href="http://www.tannerhelland.com/"><font face="Verdana" size="2">www.tannerhelland.com</font></a><font face="Verdana" size="2">
and comment on some of the original video game music I've written.
&nbsp;If
you write me with specific graphics questions not related to these
tutorials I probably won't be able to e-mail you a specific response -
if I did that I'd spend 24:7 answering questions and never have any
time for myself. &nbsp;But please contact me with your feelings
about the
tutorials, and I'll use your ideas to revise these ones and maybe write
more!</font></p>

      <p align="center"><font face="Verdana" size="2">Happy programming!</font></p>

&nbsp;
      <p style="text-align: center;"><a href="mailto:tannerhelland@hotmail.com"><small>PLEASE
E-MAIL QUESTIONS AND COMMENTS REGARDING THIS TUTORIAL TO
TANNERHELLAND@HOTMAIL.COM</small></a></p>

&nbsp;<br>

      <hr style="width: 100%; height: 2px;">
      <p><small><font size="2"><small><b><i>Disclaimer
and Legal Stuff</i></b></small></font></small></p>

      <p><small><font size="2"><small><i>Copyright
&copy; 2005-2006 by Tanner
"DemonSpectre" Helland. This article may not be reproduced in any form
(printed or electronic) without prior written consent from the author.
This document may, however, be hyperlinked on the world wide web
without permission from the author.</i></small></font></small></p>

      <p><small><font size="2"><small><i>All
programming source code
associated with these articles is provided "as is". In no event shall
the author or any of his affiliates be liable for any consequential,
special, incidental or indirect damages of any kind arising out of the
delivery, performance or use of this source code, to the maximum extent
permitted by applicable law. While this&nbsp;code has been
developed
with great care, it is not possible to warrant that it is error free.
This source code is not designed or intended to be used in any activity
that may cause personal injury, death or any other severe damage or
loss.</i></small></font></small></p>

      <p><small><font size="2"><small><i>Please
contact </i></small></font><a href="mailto:tannerhelland@hotmail.com"><font size="2"><small>tannerhelland@hotmail.com</small></font></a><i><font size="2"><small> with feedback and questions regarding
this tutorial.</small></font></i></small></p>

      </td>

    </tr>

  </tbody>
</table>

</div>

</body>
</html>
