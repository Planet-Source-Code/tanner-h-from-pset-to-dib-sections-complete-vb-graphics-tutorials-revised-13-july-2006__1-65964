<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html style="direction: ltr;" lang="en-us">
<head>




  
  
  
  
  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">




  



  
  

  
  

  
  

  
  <title>Tanner Helland's VB Graphics Tutorials - Part 2 (GetPixel/SetPixel/V)</title>
<!--DO NOT REMOVE THIS TEXT! Template provided by http://www.2createawebsite.com. For more free templates go to http://www.2createawebsite.com/build/templates.html-->
  <meta content="Tanner Helland (www.tannerhelland.com)" name="author">




  
  
  
  
  <meta content="Part 2 of the comprehensive VB graphics programming tutorial set" name="description">
</head>


<body style="direction: ltr;" alink="#ff0000" link="#000080" vlink="#000080">





<div style="font-family: Verdana;" align="center">
<table style="background-color: rgb(232, 255, 255); width: 90%;" border="1" cellpadding="15">





  <tbody>





    <tr>





      <td>
      
      
      
      
      <p align="center"><font color="#000080" size="5"><b>VB Graphics Programming&nbsp;- Part 2</b></font></p>





      
      
      
      
      <p align="center"><font color="#000080" size="5"><b><small>by
      <a href="mailto:tannerhelland@hotmail.com">Tanner "DemonSpectre" Helland</a></small></b></font></p>





      </td>





    </tr>





  
  
  
  
  </tbody>
</table>





<table border="0" cellpadding="8" cellspacing="0" width="90%">





  <tbody>





    <tr>





      <td bgcolor="#e8ffff" valign="top" width="20%">
      
      
      
      
      <table style="width: 149px; height: 118px;" border="0">





        <tbody>





          <tr>



            <td>&nbsp;</td>



          </tr>



          <tr>





            <td style="text-align: center;">
            
            
            
            
            <p align="center"><a href="VBGT_Intro.htm"><font size="2">Intro</font></a></p>





            </td>





          </tr>





          <tr>





            <td align="center"><a rel="me" href="VBGT_PureVB.htm">
            <font size="2">1 - Pure VB</font></a></td>





          </tr>





          <tr>





            <td align="center"><a rel="me" href="VBGT_GSPixel.htm">
            <font size="2">2 - Slow API</font></a></td>





          </tr>





          <tr>





            <td align="center"><a href="VBGT_BitmapBitsAndDIBs.htm">
            <font size="2">3 - Fast API</font></a></td>



          </tr>



          <tr>



            <td align="center"><font><a href="VBGT_Optimizing.htm"><font size="2">4&nbsp;- Adv. Optimizing</font></a></font></td>



          </tr>



          <tr>



          </tr>



          <tr>





          </tr>





          

        
        
        
        
        </tbody>
      
      
      
      
      </table>





      
      
      
      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">



        <tbody>



          <tr>



            <td>&nbsp;<br>



&nbsp;<br>



&nbsp;<br>



&nbsp;<br>



&nbsp;<br>



            </td>



          </tr>



        
        
        
        </tbody>
      
      
      
      </table>





      
      
      
      
      <table style="background-color: rgb(255, 255, 204); width: 147px; height: 188px;" border="1" bordercolor="#a2b3b3" cellpadding="7" cellspacing="0">





        <tbody>





          <tr>





            <td>
            
            
            
            
            <p align="center"><b>Want more tutorials?</b></p>



            
            
            
            <p align="center"><b>Let me know!</b></p>





            
            
            
            
            <p align="left"><font size="1"><a href="mailto:tannerhelland@hotmail.com">Contact the author</a> and let him know your feelings about this tutorial!</font></p>



            
            
            
            <p align="left"><font size="1">Or, visit his site at <a href="http://www.tannerhelland.com" rel="me" target="_blank">www.tannerhelland.com</a></font></p>





            

            </td>





          </tr>





        
        
        
        
        </tbody>
      
      
      
      
      </table>





      </td>





      <td valign="top" width="80%">
      
      
      <p style="text-align: left;"><font size="2"><span style="font-weight: bold;">Basic API Pixel Routines</span></font></p>

      <font face="Verdana" size="2">Next, let's discuss the basics of
per-pixel graphics programming using the simple API routines of
GetPixel and SetPixel/SetPixelV. &nbsp;If you haven't already, I recommend reading <a href="VBGT_PureVB.htm">the previous page, "Pure VB Pixel Routines,"</a> as it provides the foundation
for the advanced graphics principles discussed in this and the next two sections.</font>
      
      <p><font face="Verdana" size="2">Assuming that you now understand how to use built-in
Visual Basic functions to get per-pixel data, it is time to extend that
information a little bit further to include the Windows API. &nbsp;For those
who don't know, the Windows API is a collection of dynamically linked
libraries (so-called 'DLL files') that contain commonly used
programming routines. &nbsp;These routines, or "interfaces" (API = Application Programming
Interface) range from I/O to networking to multimedia, and they
generally work much faster than the intrinsic Visual Basic routines.
&nbsp;The API that we are going to be looking at is called "GDI32," which
stands for Graphic Device Interface: 32-bit version.&nbsp; (This dll is
included with every Windows OS since Win95, so no matter what OS you
are using with VB 5/6 this method will work.)</font></p>


      
      <p><font face="Verdana" size="2">GDI32 is a collection of -
surprise, surprise - routines commonly used in graphic and image
manipulation. &nbsp;This includes brushes for drawing, bit-block transfers
(BitBlt) for painting image sections, and what we're most interested in
for this tutorial: several important ways to get and set pixel data.&nbsp; We will start by looking
at three functions in particular: GetPixel, SetPixel, and SetPixelV.</font></p>

      
      <p><font face="Verdana" size="2"><span style="font-weight: bold;">I - Declaring the Necessary API Functions</span></font></p>

      
      <p><font face="Verdana" size="2">Because the GDI32 functions aren't an integral part of the Visual Basic programming language, we have to <b>declare </b>them
in the General Declarations section just as we would a variable or a
type.&nbsp; The syntax each of our API function declarations is as follows:</font></p>

      <font face="Verdana" size="2"><b></b></font>
      
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font><big><code><font face="Courier New" size="2">
      
      <p><big><a name="fDeclarations"></a>Private Declare Function GetPixel Lib "GDI32" (ByVal hDC As Long, ByVal x As Long, ByVal y As Long) As Long</big></p>

      <big>
      </big>
      
      <p><big>Private Declare Function SetPixel Lib "GDI32" (ByVal hDC As Long,
ByVal x As Long, ByVal y As Long, ByVal crColor As Long) As Long</big></p>

      <big>
      </big>
      
      <p><big>Private Declare Function SetPixelV Lib "GDI32" (ByVal hDC As Long,
ByVal x As Long, ByVal y As Long, ByVal crColor As Long) As Byte</big></p>

      <big>
      </big></font></code></big>
      
      <hr style="width: 100%; height: 2px;">
      
      <p><font face="Verdana" size="2">For those unfamiliar with API
declarations, these might look imposing at first - but don't worry.
&nbsp;They're all pretty darn straightforward.</font></p>





      
        
          
      <ul>
        <font face="Verdana" size="2"><li>'Private' simply means that we only
want to use these functions within the current code block. If we were
to use 'Public' instead of 'Private,' we could use these function calls
in any module, class module, or form in the current project. </li>


          <li>'Declare Function <i>FunctionName</i>' simply lets VB know that we plan on using a function titled 'GetPixel' or 'SetPixel.' </li>


          <li>'Lib "GDI32"' is short for 'Library "C:\Windows\System\GDI32.dll"' - it tells Visual Basic which <i>dynamically-linked <b>library</b></i><b> </b>contains the code for the 'FunctionName' we just declared.</li>
        </font>
      </ul>
      <font face="Verdana" size="2">
          </font>
        
      

      
      

      
      <p><font face="Verdana" size="2">The values inside of the parentheses
are nothing more than variable declarations, just as you would see for
a standard sub or function.</font></p>

      

      



      
      <ul>

        
          <font face="Verdana" size="2"><li><b>hDC</b>: stands for "Handle
Device Context." This is the computer's way of saying 'address of an
object.' This variable tells us what picture box we want to draw on
(like <b>PictureBox1.hDC) </b></li>


          <li><b>X</b> and <b>Y</b> are the location - in pixels - of the pixel we want to work with. API calls <i>always</i>
work in pixels, so you should too. &nbsp;If your picture boxes use
twips, inches, or any measurement other than pixels, these calls won't
work. </li>


          <li><b>crColor </b>in SetPixel and SetPixelV is the color that
we want to set pixel (x,y) to.&nbsp; This is identical to the 'Color' part of
the PSet call. &nbsp;(I'm not entirely sure why this is typically declared as
"crColor"; you could call it anything you wanted, but convention seems
to stick to "crColor." Go figure...)</li>
        </font><font face="Verdana" size="2">
          </font>
        
      
      </ul>





      
      <p><font face="Verdana" size="2">Looks familiar, eh? You should
be able to recognize some major similarities between these calls and
Point/PSet. If you don't, you may want to reread <a href="VBGT_PureVB.htm">the previous page</a>.</font></p>

      
      <p><font face="Verdana" size="2"><span style="font-weight: bold;">II - Using Our New Friend, GetPixel</span></font></p>

      
      <p><font face="Verdana" size="2">Now that we've told Visual Basic
everything it needs to know about our "GDI32" functions, we can use
them anywhere and everywhere we want to! &nbsp;Yay!</font></p>


      
      <p><font face="Verdana" size="2">Let's demonstrate.&nbsp; If you
wanted to get a color from pixel (35, 42) of picture box "Picture1",
you would use the following:</font></p>


      <font face="Verdana" size="2"><b></b></font>
      
      <hr style="width: 100%; height: 2px;"><big><code><font face="Verdana" size="2"><big><b>
      </b></big></font><font face="Courier New" size="2">
      
      <p><big>Dim Color as Long</big></p>

      <big>
      </big>
      
      <p><big>Color = GetPixel(Picture1.hDC, 35, 42)</big></p>

      <big>
      </big></font></code></big>
      
      <hr style="width: 100%; height: 2px;">
      
      <p><font face="Verdana" size="2">I hope this looks painfully easy, because it is.</font></p>


      
      <p><font face="Verdana" size="2">Now that you've gotten your color into a variable of type <i>Long</i>,
you still have to <a href="VBGT_PureVB.htm#ExtractColors">extract the individual red, green, and blue components</a> just
like before. I'm not going to repeat all that stuff, so just cut and
paste those functions out of the last tutorial if you need them.</font></p>

      
      <p><font face="Verdana" size="2"><span style="font-weight: bold;">III - Setting Pixels Using SetPixel and SetPixelV</span></font></p>

      
      <p><font face="Verdana" size="2">Again, setting a pixel's color is almost identical to getting its color:</font></p>


      <font face="Verdana" size="2"><b></b></font>
      
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font><big><code><font size="2">
      
      <p><big>Dim APIReturnValue as Long</big></p>

      <big>
      </big>
      
      <p><big>APIReturnValue = SetPixel(PictureBox.hDC, x, y, Color)</big></p>

      <big>
      </big></font></code></big>
      
      <p style="font-family: Courier New;"><big><code><i><u><font size="2"><big>OR</big></font></u></i></code></big></p>


      <big><code><font size="2">
      
      <p><big>SetPixel PictureBox.hDC, x, y, Color</big></p>

      <big>
      </big></font></code></big>
      
      <p style="font-family: Courier New;"><big><code><i><u><font size="2"><big>OR</big></font></u></i></code></big></p>


      <big><code><font size="2">
      
      <p><big>Dim APIReturnValue as Byte</big></p>

      <big>
      </big>
      
      <p><big>APIReturnValue = SetPixelV(PictureBox.hDC, x, y, Color)</big></p>

      <big>
      </big></font></code></big>
      
      <p style="font-family: Courier New;"><big><code><i><u><font size="2"><big>OR</big></font></u></i></code></big></p>


      <big style="font-family: Courier New;"><font size="2">
      
      <p><big><code>SetPixelV PictureBox.hDC, x, y, Color</code></big></p>

      <big>
      </big></font></big>
      
      <hr style="width: 100%; height: 2px;">
      
      <p><font face="Verdana" size="2">Ahhh! Four different ways to do exactly the same thing - seems a little weird, doesn't it? &nbsp;Let me explain why this is:</font></p>


      
      <p><font face="Verdana" size="2">Every function returns a value of some
type. &nbsp;If you'll <a href="#fDeclarations">scroll back up</a> and look at the SetPixel and SetPixelV
declarations, you'll notice a slight difference between the two:
SetPixel is of type <i>Long</i> and SetPixelV is of type <i>Byte.</i>
This is because SetPixel returns the color that it was able to set,
while SetPixelV only returns whether or not the pixel was set (1 or 0).
&nbsp;Because SetPixelV only has to return a boolean value instead of a Long
(though they're stored identically in memory), I prefer to use it.&nbsp;
However, SetPixel could be useful in color modes other than 24-bit,
because you could determine the difference between the color you wanted
to set and the color that actually got set. </font></p>


      
      <p><font face="Verdana" size="2">This is the difference between SetPixel and SetPixelV.&nbsp; The reason for the other two
declarations is whether or not we <i>care </i>what value
SetPixel/SetPixelV returns. &nbsp;If we don't care, it is easier to just use
the second form of the call - the one without the extra variable
declaration.&nbsp; If, however, we want to know what value they return, we
need to use the first form.</font></p>


      
      <p><font face="Verdana" size="2">Now you know four different ways to set pixels using the API!&nbsp; Use that to impress your friends... :)</font></p>


      
      <p><font face="Verdana" size="2">Let's quickly demonstrate a specific example using SetPixel/SetPixelV. Using our example from the last tutorial, let's say
that you want to set pixel (35,42) of the picture box titled "Picture1" to the value of variable
'Color:'</font></p>


      <font face="Verdana" size="2"><b></b></font>
      
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font><big><code><font face="Courier New" size="2">
      
      <p><big>SetPixelV Picture1.hDC, 35, 42, Color</big></p>

      <big>
      </big></font></code></big>
      
      <hr style="width: 100%; height: 2px;">
      
      <p><font face="Verdana" size="2">Again we note that Color is of type <i>Long</i> - you could use the <b>RGB()</b> function just as you did in part 1.&nbsp; In that case, you could write:&nbsp;</font></p>


      <font face="Courier New" size="2"></font>
      
      <hr style="width: 100%; height: 2px;"><big><code><font face="Courier New" size="2">
      
      <p><big>SetPixelV Picture1.hDC, 35, 42, RGB(255, 0, 0)</big></p>

      <big>
      </big></font></code></big>
      
      <hr style="width: 100%; height: 2px;">
      
      <p><font face="Verdana" size="2">To set pixel (35, 42) of
Picture1 to pure red. &nbsp;See how easy the API calls are to use?
&nbsp;Once declared, they are no harder than than PSet and Point - and,
as you're about to see, they're significantly faster.</font></p>

      
      <p><font face="Verdana" size="2"><span style="font-weight: bold;">IV - Using GetPixel and SetPixel to Edit an Image</span></font></p>

      
      <p align="center"><a href="VBGT_API_example.zip"><font face="Verdana">DOWNLOAD THE GETPIXEL/SETPIXEL EXAMPLE PROGRAM</font></a></p>


      
      <p><font face="Verdana" size="2">This .zip file contains a program identical to the last one, except that this one utilizes the API for its pixel
interaction. &nbsp;Compare the results of this program to the PSet/Point one
- notice a pretty significant difference? &nbsp;As a good programming exercise, build a
small function to time how long each method takes and compare the results.
&nbsp;The API calls can be anywhere from 3-10x faster than PSet and Point -
a pretty noticeable difference for hardly any extra work.</font></p>

      
      <p><font face="Verdana" size="2"><span style="font-weight: bold;">V - In Conclusion: The Need for Speed - GetPixel/SetPixel vs. Point/PSet and Beyond...</span></font></p>

      
      <p><font face="Verdana" size="2">I hope that you're
beginning to see the advantages of well-used API calls within your
Visual Basic programs: if you can master using the Windows API, your VB
capabilities are endless. &nbsp;GetPixel/SetPixel are just the tip of the
iceberg, too - the next tutorial will show you a method 10-50x faster
than this one! &nbsp;Get excited!!</font></p>


      
      <p><font face="Verdana" size="2">But before we head into the next
tutorial, let's think of ways that GetPixel and SetPixel/SetPixelV
could be improved.</font></p>

      
      <p><font face="Verdana" size="2">For one, we still have to manually extract the red,
green, and blue values out of a <i>Long</i>-type variable - this is
not only annoying, but it's slow as well. &nbsp;Things would go faster if we
could somehow get Windows to separate the <i>Long</i> variable for us.</font></p>


      
      <p><font face="Verdana" size="2">Also, there is this problem of having
to use GetPixel/SetPixel for every single pixel.&nbsp; Any way you slice it,
running two functions for each of our 120,000 pixels is a pretty slow
proposition. &nbsp;What if there was a way to get the data for every single
pixel at once - that way, we'd only have to use a single API call to
get <i>all </i>of our pixel data. &nbsp;Now <span style="font-style: italic;">that</span> would be&nbsp;fast!</font></p>


      
      <p><font face="Verdana" size="2">Well believe-it-or-not, our next
tutorial will explain how to do just that - get Windows to give us all
of an image's pixel data at once, nicely parsed into its red, green,
and blue components. &nbsp;These are commonly referred to as <b><i>DIB sections</i></b>, the most powerful&nbsp;API graphics call you can use from within VB.</font></p>

      
      <p><font face="Verdana" size="2"></font></p>




      
      <div style="text-align: center;"><font face="Verdana" size="2">
      
      <p><a rel="me" href="VBGT_BitmapBitsAndDIBs.htm">CONTINUE TO "ADVANCED API PIXEL ROUTINES"</a> </p>

      </font></div>

      <br>

      
      <hr style="width: 100%; height: 2px;">
      
      
      
      
      
      <p><small><font size="2"><small><b><i>Disclaimer and Legal Stuff</i></b></small></font></small></p>



      
      
      
      <p><small><font size="2"><small><i>Copyright &copy; 2005-2006 by Tanner
"DemonSpectre" Helland. This article may not be reproduced in any form
(printed or electronic) without prior written consent from the author.
This document may, however, be hyperlinked on the world wide web
without permission from the author.</i></small></font></small></p>




      
      
      
      <p><small><font size="2"><small><i>All programming source code
associated with these articles is provided "as is". In no event shall
the author or any of his affiliates be liable for any consequential,
special, incidental or indirect damages of any kind arising out of the
delivery, performance or use of this source code, to the maximum extent
permitted by applicable law. While this&nbsp;code has been developed
with great care, it is not possible to warrant that it is error free.
This source code is not designed or intended to be used in any activity
that may cause personal injury, death or any other severe damage or
loss.</i></small></font></small></p>




      
      
      
      <p><small><font size="2"><small><i>Please contact </i></small></font><a href="mailto:tannerhelland@hotmail.com"><font size="2"><small>tannerhelland@hotmail.com</small></font></a><i><font size="2"><small> with feedback and questions regarding this tutorial.</small></font></i></small></p>



      </td>





    </tr>





  
  
  
  
  </tbody>
</table>





</div>





</body>
</html>
