<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html style="direction: ltr;" lang="en-us">
<head>


  
  
  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">


  



  
  

  
  <title>Tanner Helland's VB Graphics Tutorials - Part 1 (Pure VB Pixel Functions)</title>
<!--DO NOT REMOVE THIS TEXT! Template provided by http://www.2createawebsite.com. For more free templates go to http://www.2createawebsite.com/build/templates.html-->
  <meta content="Tanner Helland (www.tannerhelland.com)" name="author">


  
  
  <meta content="Part 1 of the comprehensive VB graphics programming tutorial set" name="description">
</head>


<body alink="#ff0000" link="#000080" vlink="#000080">



<div style="font-family: Verdana;" align="center">
<table style="background-color: rgb(232, 255, 255); width: 90%;" border="1" cellpadding="15">



  <tbody>



    <tr>



      <td>
      
      
      <p align="center"><font color="#000080" size="5"><b>VB Graphics Programming&nbsp;- Part 1</b></font></p>



      
      
      <p align="center"><font color="#000080" size="5"><b><small>by
      <a href="mailto:tannerhelland@hotmail.com">Tanner "DemonSpectre" Helland</a></small></b></font></p>



      </td>



    </tr>



  
  
  </tbody>
</table>



<table border="0" cellpadding="8" cellspacing="0" width="90%">



  <tbody>



    <tr>



      <td bgcolor="#e8ffff" valign="top" width="20%">
      
      
      <table style="width: 149px; height: 118px;" border="0">



        <tbody>



          <tr>

            <td>&nbsp;</td>

          </tr>

          <tr>



            <td style="text-align: center;">
            
            
            <p align="center"><a href="VBGT_Intro.htm"><font size="2">Intro</font></a></p>



            </td>



          </tr>



          <tr>



            <td align="center"><a rel="me" href="VBGT_PureVB.htm">
            <font size="2">1 - Pure VB</font></a></td>



          </tr>



          <tr>



            <td align="center"><a rel="me" href="VBGT_GSPixel.htm">
            <font size="2">2 - Slow API</font></a></td>



          </tr>



          <tr>



            <td align="center"><a href="VBGT_BitmapBitsAndDIBs.htm">
            <font size="2">3 - Fast API</font></a></td>

          </tr>

          <tr>

            <td align="center"><font><a href="VBGT_Optimizing.htm"><font size="2">4&nbsp;- Adv. Optimizing</font></a></font></td>

          </tr>

          <tr>

          </tr>

          <tr>



          </tr>



          

        
        
        </tbody>
      
      
      </table>



      
      
      <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">

        <tbody>

          <tr>

            <td>&nbsp;<br>

&nbsp;<br>

&nbsp;<br>

&nbsp;<br>

&nbsp;<br>

            </td>

          </tr>

        
        </tbody>
      
      </table>



      
      
      <table style="background-color: rgb(255, 255, 204); width: 147px; height: 188px;" border="1" bordercolor="#a2b3b3" cellpadding="7" cellspacing="0">



        <tbody>



          <tr>



            <td>
            
            
            <p align="center"><b>Want more tutorials?</b></p>

            
            <p align="center"><b>Let me know!</b></p>



            
            
            <p align="left"><font size="1"><a href="mailto:tannerhelland@hotmail.com">Contact the author</a> and let him know your feelings about this tutorial!</font></p>

            
            <p align="left"><font size="1">Or, visit his site at <a href="http://www.tannerhelland.com" rel="me" target="_blank">www.tannerhelland.com</a></font></p>



            

            </td>



          </tr>



        
        
        </tbody>
      
      
      </table>



      </td>



      <td valign="top" width="80%">
      <p style="text-align: left;"><font size="2"><span style="font-weight: bold;">Pure VB Pixel Routines</span></font></p>
      <div style="text-align: left;"><font size="2">First, let's
discuss the basics of
per-pixel graphics programming using only built-in Visual Basic
functions. &nbsp;I recommend that even hardened VB veterans glance
through
this document, as it provides the foundation for the advanced graphics
principles discussed in the next three tutorials. &nbsp;We will discuss
the
only VB per-pixel graphics routines (Point and PSet), and after this is
done you may know a lot more than you ever wanted to about VB
graphics...lol.&nbsp; :)</font><span style="font-weight: bold;"></span><br>
      </div>
      <font size="2"><b></b></font>
      <p style="text-align: left;"><font size="2">Most of you have probably heard of the "horrible twins of PSet and Point"<span style="font-style: italic;">*</span><i></i>.
These two routines are usually the first per-pixel method VB
programmers are introduced to&nbsp;(since they come included as part of
the language), but -
perhaps inevitably - they are also the slowest way to do things.
&nbsp;Avoid ever using these
routines for per-pixel image processing (though they do have some uses
in non-pixel-sized work). I include them here only
for completeness; I would never recommend using them in an actual image
processing
program because they are <span style="font-style: italic;">so</span> extremely slow. Why are they so slow? We'll discuss that later, after we've looked at their syntax.</font></p>
      <p><font size="2"><span style="font-weight: bold;"><span style="font-weight: bold;">I - Getting the Color of an Individual Pixel</span></span></font></p>
      <p><font face="Verdana" size="2">You can use the Point event in VB to get the color of a specified pixel. The format is as follows:</font></p>
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font>
      <p><big><code><font face="Courier New" size="2"><big>Dim Color as Long<br>
Color = PictureBox.Point(x,y)</big></font></code></big><font face="Verdana" size="2"> </font></p>
      <hr style="width: 100%; height: 2px;">
      <p><font face="Verdana" size="2">PictureBox is the name of
the picture box or form you want to retrieve the pixel from, and (x,y)
are the pixel's coordinates.</font></p>
      <p><font face="Verdana" size="2">So, if you wanted to get a color from spot
(35, 42) of picture box "Picture1", you would use the following:</font></p>
      <hr style="width: 100%; height: 2px;">
      <font face="Verdana" size="2"><b>
      </b></font><big><code><font face="Courier New" size="2">
      <p><big>Color = Picture1.Point(35,42)</big></p>
      </font></code></big>
      <hr style="width: 100%; height: 2px;"><font face="Courier New" size="2">
      </font>
      <p><font face="Verdana" size="2">It doesn't get much simpler than that, folks.</font></p>

      <p><font face="Verdana" size="2">So now the question is "what do I do once I've gotten the color?" After all, it comes in&nbsp;<i>Long</i>
type, which is some strange number from -2 billion to +2 billion...and
that really doesn't lend itself to easily adjusting the color of that pixel.&nbsp;</font></p>
      <p><font face="Verdana" size="2">Thus the challenge is figuring out how to change one 4-byte number into three
1-byte numbers (red, green, and blue).</font></p>

      <p><font face="Verdana" size="2">While this may sound easy, the theory
behind doing this requires some knowledge of binary encoding&hellip;which is far too large a topic to be covered here. Luckily
for you,&nbsp;Alan of <span style="font-style: italic;">Students of Game Design</span> has posted just such a tutorial at </font><a target="_blank" rel="friend met colleague" href="http://www.studentsofgamedesign.com/bitsnbytes.php"><font face="Verdana" size="2">http://www.studentsofgamedesign.com/bitsnbytes.php</font></a><font face="Verdana" size="2">
- so if you find yourself so inclined, I encourage you to read through his
tutorial on binary encoding. If you do, the following functions will
not only make a lot more sense to you, but you'll also be a far better-equipped programmer. </font></p>

      <p><font face="Verdana" size="2"><a name="ExtractColors"></a>Having said that, here are three functions that will automatically do RGB color extraction for you:</font></p>

      <font face="Verdana" size="2"><b></b></font>
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font><big><code><font face="Courier New" size="2">
      <p><big>Public Function ExtractR(ByVal CurrentColor As Long) As Byte</big></p>
      <big>
      </big>
      <p><big>&nbsp;&nbsp; ExtractR = CurrentColor And 255</big></p>
      <big>
      </big>
      <p><big>End Function</big></p>
      <big>
      </big></font></code></big>
      <hr style="width: 100%; height: 2px;">
      <big><code><font face="Courier New" size="2">
      <p><big>Public Function ExtractG(ByVal CurrentColor As Long) As Byte</big></p>
      <big>
      </big>
      <p><big>&nbsp; &nbsp;ExtractG = (CurrentColor \ 256) And 255</big></p>
      <big>
      </big>
      <p><big>End Function</big></p>
      <big>
      </big></font></code></big>
      <hr style="width: 100%; height: 2px;">
      <p><big><code><font face="Courier New" size="2"><big>Public Function ExtractB(ByVal CurrentColor As Long) As Byte</big></font></code></big></p>

      <p><big><code><font face="Courier New" size="2"><big>&nbsp; &nbsp;ExtractB = (CurrentColor \ 65536) And 255</big></font></code></big></p>

      <p><big><code><font face="Courier New" size="2"><big>End Function</big></font></code></big><b><font face="Verdana" size="2"> </font></b></p>

      <hr style="width: 100%; height: 2px;">
      <p><font face="Verdana" size="2">To utilize these functions, use the following syntax:</font></p>

      <font face="Verdana" size="2"><b></b></font>
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font><font face="Courier New" size="2">
      <p>Dim R as Byte, G as Byte, B as Byte</p>

      <p>Dim Color as Long</p>

      <p>Color = PictureBox.Point(0, 0)</p>

      <p>R = ExtractR(Color)</p>

      <p>G = ExtractG(Color)</p>

      <p>B = ExtractB(Color)</p>

      </font>
      <hr style="width: 100%; height: 2px;">
      <p><font face="Verdana" size="2">Pretty neat, eh? (FINAL NOTE: while you may find these three color extraction
routines very handy, I would still highly recommend reading up on
binary encoding - again, Alan's tutorial at </font><a target="_blank" rel="friend met colleague" href="http://www.studentsofgamedesign.com/bitsnbytes.php"><font face="Verdana" size="2">www.studentsofgamedesign.com</font></a><font face="Verdana" size="2">
is excellent. If you don't understand how binary data works, you're not
going to get very far in the programming world - and besides, it's simple once you can find a good teaching source.)</font></p>

      <p><font face="Verdana" size="2">This is the first method we'll learn for getting a
pixel's data and breaking it down into its red, green, and blue
components. &nbsp;Now let's quickly mention how to set this data back into a
picture box.</font></p>
      <p><font face="Verdana" size="2"><span style="font-weight: bold;">II - Setting the Color of an Individual Pixel</span></font></p>
      <p><font face="Verdana" size="2">Setting a pixel's color is almost identical to getting its color. You use the VB event "PSet," which stands for "Pixel Set."</font></p>

      <font face="Verdana" size="2"><b></b></font>
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font><big><code><font face="Courier New" size="2">
      <p><big>PictureBox.PSet (x,y), Color</big></p>
      <big>
      </big></font></code></big>
      <hr style="width: 100%; height: 2px;">
      <p><font face="Verdana" size="2">Again, PictureBox is the name of the
picture box or form you want to set the pixel to and (x,y) are the
pixel's coordinates. The only difference here is that we also include
the color that we want to set. So, using the example above, if you
wanted to set a color to pixel (35, 42) of picture box "Picture1" you
would use the following:</font></p>

      <font face="Verdana" size="2"><b></b></font>
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font><big><code><font face="Courier New" size="2">
      <p><big>Picture1.PSet (35,42), Color</big></p>
      <big>
      </big></font></code></big>
      <hr style="width: 100%; height: 2px;">
      <p><font face="Verdana" size="2">It is worth noting that Color is of type <i>Long</i>,
which creates the same problem we discussed above - how to change three
separate red/green/blue values into a single 4-byte number. Fortunately, VB has a
built-in command called <b>RGB()</b> that does this conversion for us.
To illustrate it's use, let's use the same example saying that you want
to change the color of the pixel at (35,42) to pure red:</font></p>

      <font face="Verdana" size="2"><b></b></font>
      <hr style="width: 100%; height: 2px;"><font face="Verdana" size="2"><b>
      </b></font><big><code><font face="Courier New" size="2">
      <p><big>Picture1.PSet (35,42), RGB(255, 0, 0)</big></p>
      <big>
      </big></font></code></big>
      <hr style="width: 100%; height: 2px;">
      <p><font face="Verdana" size="2">The first RGB parameter is red, then green, last blue, so RGB(255,0,0) will set the color to pure red.&nbsp; Easy, isn't it?</font></p>
      <p><font face="Verdana" size="2"><span style="font-weight: bold;">III - Using Point and PSet to Edit an Image</span></font></p>
      <p><font face="Verdana" size="2">First, a little disclaimer:
entire
books have been written on the theories behind GP and there are entire
programming disciplines whose job is nothing but optimizing graphics
routines.
&nbsp;So, while what I'm about to show you in code is a nice method, be
advised that GP is
an extremely complicated field and to truly succeed in it you must be
willing to do a little research.&nbsp; I have chosen a well-optimized
and
very standard method for my sample programs because it is easy to
understand while still offering good results. &nbsp;But, for this first
tutorial, don't be disappointed if the results aren't particularly
incredible or lightning-fast. &nbsp;That's what the next three
tutorials are
for! </font>
      </p>
      <p align="center"><a href="VBGT_VB_example.zip"><font face="Verdana">DOWNLOAD THE PSET/POINT EXAMPLE PROGRAM</font></a></p>

      <p><font face="Verdana" size="2">The code in this .zip file will demonstrate how to change the brightness of an
image using a standard linear brightness algorithm. The code is simple
and well-commented. Read through the comments and make sure that you
understand how everything works.</font></p>
      <p><font face="Verdana" size="2"><span style="font-weight: bold;"><a name="soSlow"></a>IV - Why are Point and PSet So Slow?</span></font></p>
      <p><font face="Verdana" size="2">If you've tried out the
sample code, you're probably not impressed&hellip;and rightfully so! &nbsp;Point and PSet - though easy to use - are <span style="font-style: italic;">extremely</span> slow. Can you imagine trying
to work with images 4 or 5 times the size of the demo one - argh!!</font></p>

      <p><font face="Verdana" size="2">So why are these two functions SO slow? &nbsp;To illustrate it,
let's follow the path your computer takes for changing the color of a
single pixel using Point and PSet, as you just saw done in the sample program. <i>(Author's
Note: I base these conclusions on general programming knowledge, not
known facts; so while I'm pretty sure that this explanation is accurate, I could be wrong on some of the details. I'd invite and
encourage input on making this section 100% accurate.)</i></font></p>



      <ol>
        <ol>
          <font face="Verdana" size="2"><li>Upon encountering a Point command,
VB's first task is to do a whole crapload of error checking. This
involves things like making sure that the pixel you want is within the image's
boundaries, making sure that the PictureBox exists, seeing if an image
has been loaded or if you're working with a blank image, etc. This step
is speed killer #1 - but the advantage is that Point will never crash
your machine, thankfully.</li>

          <li>Once VB has decided that there is actually a pixel at
point (x,y),
it now has to figure out where to get the pixel color from. &nbsp;This
changes depending on both the status of AutoRedraw and whether or not
you've updated the image since loading it. VB will usually go to the
'Image' property,
but in certain cases AutoRedraw may tell it to go to the 'Picture'
property. &nbsp;(If that doesn't make any sense, forget about it!)
&nbsp;This step is speed killer #2 - but again, you never crash
your machine and you always get predictable results.</li>

          <li>After VB knows where the pixel data resides, it can now go and get
the pixel information. This step is all handled in memory, so this is really fast.</li>
          <li>After VB gets the&nbsp;color of this pixel, it must transfer that information
into the variable specified by the original Point command. &nbsp;This is all but instantaneous - no speed problems here.</li>

          <li>Once a variable of type Long contains the color of the pixel, we
must parse that long into its red, green, and blue components. This
step is speed killer #3, because we gotta do three 'Ands' and two
'Divides' for every single pixel. For an image like the sample one,
that's 400x300 or 120,000 pixels... meaning there's a grand total of&nbsp;360,000 'Ands' and 240,000
'Divides.' This step is a very, very bad one for speed - the 'Ands' are
fast, but the 'Divides' are extremely slow - times 240,000.</li>

          <li>Once we have a red, green, and blue component, we change these
values to the new values specified by the look-up table. This step is
very fast because, again, it's nothing more than simple memory transfers.</li>

          <li>Next comes the PSet step.&nbsp; This process is almost identical to
Point, so I'm going to abbreviate its steps. &nbsp;First, it does the error
checking. &nbsp;Speed killer #4 here.</li>

          <li>VB will automatically assign the new color to its appropriate
location within the 'Image' property. &nbsp;This is fast - again, it's all
done in memory.</li>

          <li>Now VB has to decide whether or not to refresh the image.&nbsp; If
AutoRedraw is set to false, VB will attempt to redraw the entire image
after each pixel has been set. &nbsp;Do not do this - EVER - while working
with per-pixel programming routines.&nbsp; If AutoRedraw is set to true, VB
will only redraw the entire image after you explicitly tell it to or
after you finish the loop containing the PSet calls.&nbsp; Redrawing the
image is very slow because your computer has to copy the information
for thousands of pixels from the Picture or Image property to wherever
the screen data is located (either VRAM or RAM - this is yet one more
thing your computer has to figure it; it too takes time). Although your
RAM is one of the faster parts of your computer, it will be slowed down
by lots of huge memory chunk transfers (like graphics). &nbsp;This is speed killer #5.</li>
          </font>
        </ol>
      </ol>


      <p><font face="Verdana" size="2">Steps 1, 2, 5,
7, and 9 are what's slowing down your PSet/Point-based graphics
program. Visual Basic is very nice in that it does almost all of your
error checking for you, but there is a definite speed trade-off. &nbsp;In
other programming languages and per-pixel routines, many of these error
checking steps are removed - which is one of the reasons why other
languages and functions are generally faster but more dangerous to use. In the next
three tutorials we will discuss alternate methods of doing graphics
that cut out some of these "speed killer" steps.</font></p>
      <p><font face="Verdana" size="2"><span style="font-weight: bold;">V - Conclusion</span></font></p>
      <p><font face="Verdana" size="2">
      <p>Hope that all made sense to you!&nbsp; Does it feel good
knowing you can now program any graphics routine using nothing but VB?
&nbsp;Hope it does - but don't get too comfortable yet.</p>
      <p>To be totally honest, I hope that you completely forget that PSet
and Point even exist - at least as far as per-pixel image processing is
concerned - after reading the next three tutorials. &nbsp;Both are extremely
slow and... well, just bad programming for&nbsp;image processing.&nbsp;
Visual Basic is good for a lot of things, but its pixel interfacing is a
total joke.&nbsp;</p>
      <p> Thankfully, there are three more tutorials that will
show you better, faster ways to do graphics programming - but at least
you now know how to use PSet and Point if the need ever arises.</p>
      <p>&nbsp;</p>
      </font></p>


      
      
      <p style="text-align: center;"><a href="VBGT_GSPixel.htm" rel="me"><font size="2"><span style="font-weight: bold;">CONTINUE TO "BASIC API PIXEL ROUTINES"</span></font></a></p>
      <p>&nbsp;<br>
      <small style="font-style: italic;"><small>*As quoted by Matt Hart, the legendary VB programmer</small></small> </p>


      
      
      
      <hr style="width: 100%; height: 2px;">
      
      
      
      <p><small><font size="2"><small><b><i>Disclaimer and Legal Stuff</i></b></small></font></small></p>

      
      <p><small><font size="2"><small><i>Copyright &copy; 2005-2006 by Tanner
"DemonSpectre" Helland. This article may not be reproduced in any form
(printed or electronic) without prior written consent from the author.
This document may, however, be hyperlinked on the world wide web
without permission from the author.</i></small></font></small></p>


      
      <p><small><font size="2"><small><i>All programming source code
associated with these articles is provided "as is". In no event shall
the author or any of his affiliates be liable for any consequential,
special, incidental or indirect damages of any kind arising out of the
delivery, performance or use of this source code, to the maximum extent
permitted by applicable law. While this&nbsp;code has been developed
with great care, it is not possible to warrant that it is error free.
This source code is not designed or intended to be used in any activity
that may cause personal injury, death or any other severe damage or
loss.</i></small></font></small></p>


      
      <p><small><font size="2"><small><i>Please contact </i></small></font><a href="mailto:tannerhelland@hotmail.com"><font size="2"><small>tannerhelland@hotmail.com</small></font></a><i><font size="2"><small> with feedback and questions regarding this tutorial.</small></font></i></small></p>

      </td>



    </tr>



  
  
  </tbody>
</table>



</div>



</body>
</html>
